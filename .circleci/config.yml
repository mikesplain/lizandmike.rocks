version: 2

jobs:
  build:
    docker:
      - image: circleci/ruby:2.4.2


    steps:
    - checkout
    - restore_cache:
        keys:
          - gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          - gem-cache-{{ arch }}-{{ .Branch }}
          - gem-cache

    - run: bundle install --path vendor/bundle

    - save_cache:
        key: gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle



  test:
    docker:
      - image: circleci/ruby:2.4.2
    steps:
      - checkout
      - run:
          name: Jekyll Doctor
          command: bundle exec jekyll doctor

  deploy:
    docker:
      - image: circleci/ruby:2.4.2
    steps:
      - checkout
      - run:
          name: Update docs
          command: |
            if $(git diff-tree --no-commit-id --name-only @ | grep -qv docs); then
                git diff-tree --no-commit-id --name-only @ | grep -v docs
                bundle exec jekyll build --destination docs
                git config --global user.email "noreply@lizandmike.rocks"
                git config --global user.name "Circle Ci Docs Build"
                git add .
                git commit -am "Automated docs update"
                git push
            fi
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Purge cloudflare
          command: |
            docker run  -e "CLOUD_FLARE_API_KEY=$CLOUD_FLARE_API_KEY" \
                        -e "CLOUD_FLARE_EMAIL=$CLOUD_FLARE_EMAIL" \
                        mikesplain/cloudflare-client:latest \
                        bin/purge_cache lizandmike.rocks
      - store_artifacts:
          path: docs

workflows:
  version: 2
  build_and_test_deploy:
    jobs:
      - build
      - test
      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
